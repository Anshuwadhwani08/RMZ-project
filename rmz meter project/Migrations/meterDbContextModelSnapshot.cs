// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using rmz_meter_project.MeterDbcontext;

#nullable disable

namespace rmzmeterproject.Migrations
{
    [DbContext(typeof(meterDbContext))]
    partial class meterDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("rmz_meter_project.Models.Domain.Building", b =>
                {
                    b.Property<int>("BuildingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BuildingId"));

                    b.Property<string>("BuildingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FacilityId")
                        .HasColumnType("int");

                    b.HasKey("BuildingId");

                    b.HasIndex("FacilityId");

                    b.ToTable("buildings");
                });

            modelBuilder.Entity("rmz_meter_project.Models.Domain.City", b =>
                {
                    b.Property<int>("cityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("cityId"));

                    b.Property<string>("Cityname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("cityId");

                    b.ToTable("cities");
                });

            modelBuilder.Entity("rmz_meter_project.Models.Domain.Facility", b =>
                {
                    b.Property<int>("FacilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FacilityId"));

                    b.Property<string>("FacilityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("cityId")
                        .HasColumnType("int");

                    b.HasKey("FacilityId");

                    b.HasIndex("cityId");

                    b.ToTable("facilities");
                });

            modelBuilder.Entity("rmz_meter_project.Models.Domain.Floor", b =>
                {
                    b.Property<int>("FloorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FloorId"));

                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<string>("FloorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FloorId");

                    b.HasIndex("BuildingId");

                    b.ToTable("floors");
                });

            modelBuilder.Entity("rmz_meter_project.Models.Domain.Zone", b =>
                {
                    b.Property<int>("ZoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ZoneId"));

                    b.Property<int>("FloorId")
                        .HasColumnType("int");

                    b.Property<string>("TypeofmeterPresent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZoneName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ZoneId");

                    b.HasIndex("FloorId");

                    b.ToTable("zones");
                });

            modelBuilder.Entity("rmz_meter_project.Models.Domain.meter", b =>
                {
                    b.Property<int>("meterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("meterId"));

                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.Property<DateTime>("currentTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("installationTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("meterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("meterType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("meterreading")
                        .HasColumnType("bigint");

                    b.HasKey("meterId");

                    b.HasIndex("ZoneId");

                    b.ToTable("meters");
                });

            modelBuilder.Entity("rmz_meter_project.Models.Domain.Building", b =>
                {
                    b.HasOne("rmz_meter_project.Models.Domain.Facility", "Facility")
                        .WithMany("buildings")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");
                });

            modelBuilder.Entity("rmz_meter_project.Models.Domain.Facility", b =>
                {
                    b.HasOne("rmz_meter_project.Models.Domain.City", "City")
                        .WithMany("facilities")
                        .HasForeignKey("cityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("rmz_meter_project.Models.Domain.Floor", b =>
                {
                    b.HasOne("rmz_meter_project.Models.Domain.Building", "building")
                        .WithMany("Floor")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("building");
                });

            modelBuilder.Entity("rmz_meter_project.Models.Domain.Zone", b =>
                {
                    b.HasOne("rmz_meter_project.Models.Domain.Floor", "floor")
                        .WithMany("zones")
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("floor");
                });

            modelBuilder.Entity("rmz_meter_project.Models.Domain.meter", b =>
                {
                    b.HasOne("rmz_meter_project.Models.Domain.Zone", "Zone")
                        .WithMany("meters")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("rmz_meter_project.Models.Domain.Building", b =>
                {
                    b.Navigation("Floor");
                });

            modelBuilder.Entity("rmz_meter_project.Models.Domain.City", b =>
                {
                    b.Navigation("facilities");
                });

            modelBuilder.Entity("rmz_meter_project.Models.Domain.Facility", b =>
                {
                    b.Navigation("buildings");
                });

            modelBuilder.Entity("rmz_meter_project.Models.Domain.Floor", b =>
                {
                    b.Navigation("zones");
                });

            modelBuilder.Entity("rmz_meter_project.Models.Domain.Zone", b =>
                {
                    b.Navigation("meters");
                });
#pragma warning restore 612, 618
        }
    }
}
